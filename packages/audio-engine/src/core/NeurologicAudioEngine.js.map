{"version":3,"file":"NeurologicAudioEngine.js","sourceRoot":"","sources":["NeurologicAudioEngine.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events';\nimport * as Tone from 'tone';\n\n/**\n * NeurologicAudioEngine - Core audio processing engine for SampleMind AI\n * Implements bio-inspired signal processing based on neural oscillation patterns\n */\nexport class NeurologicAudioEngine extends EventEmitter {\n  private context: AudioContext;\n  private analyser: AnalyserNode;\n  private processor: ScriptProcessorNode | null = null;\n  private source: AudioBufferSourceNode | null = null;\n  private isPlaying: boolean = false;\n  \n  // Neural oscillation bands (in Hz)\n  public readonly neuralBands = {\n    delta: { min: 0.5, max: 4 },     // Deep bass, sub-bass\n    theta: { min: 4, max: 8 },       // Bass fundamentals\n    alpha: { min: 8, max: 13 },      // Low-mid frequencies\n    beta: { min: 13, max: 30 },      // Mid-high frequencies\n    gamma: { min: 30, max: 100 },    // High frequencies, transients\n    ultra: { min: 100, max: 500 }    // Ultra-high, harmonics\n  };\n\n  constructor() {\n    super();\n    this.context = new (window.AudioContext || (window as any).webkitAudioContext)();\n    this.analyser = this.context.createAnalyser();\n    this.analyser.fftSize = 2048;\n  }\n\n  /**\n   * Initialize the audio engine\n   */\n  public async initialize(): Promise<void> {\n    try {\n      // Set up audio processing\n      this.processor = this.context.createScriptProcessor(4096, 1, 1);\n      this.processor.connect(this.context.destination);\n      \n      // Set up analyzer\n      this.analyser.connect(this.context.destination);\n      \n      this.emit('initialized');\n    } catch (error) {\n      console.error('Error initializing audio engine:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Load audio from various sources\n   */\n  public async loadAudio(source: string | ArrayBuffer | AudioBuffer): Promise<AudioBuffer> {\n    try {\n      let audioBuffer: AudioBuffer;\n      \n      if (source instanceof AudioBuffer) {\n        audioBuffer = source;\n      } else if (source instanceof ArrayBuffer) {\n        audioBuffer = await this.context.decodeAudioData(source);\n      } else if (typeof source === 'string') {\n        const response = await fetch(source);\n        const arrayBuffer = await response.arrayBuffer();\n        audioBuffer = await this.context.decodeAudioData(arrayBuffer);\n      } else {\n        throw new Error('Unsupported audio source type');\n      }\n      \n      this.emit('audioLoaded', audioBuffer);\n      return audioBuffer;\n    } catch (error) {\n      console.error('Error loading audio:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Play loaded audio\n   */\n  public play(buffer: AudioBuffer): void {\n    if (this.isPlaying) {\n      this.stop();\n    }\n\n    this.source = this.context.createBufferSource();\n    this.source.buffer = buffer;\n    this.source.connect(this.analyser);\n    this.source.connect(this.context.destination);\n    \n    this.source.onended = () => {\n      this.isPlaying = false;\n      this.emit('playbackEnded');\n    };\n    \n    this.source.start(0);\n    this.isPlaying = true;\n    this.emit('playbackStarted');\n  }\n\n  /**\n   * Stop audio playback\n   */\n  public stop(): void {\n    if (this.source) {\n      this.source.stop();\n      this.source.disconnect();\n      this.source = null;\n    }\n    this.isPlaying = false;\n    this.emit('playbackStopped');\n  }\n\n  /**\n   * Get frequency data for visualization\n   */\n  public getFrequencyData(): Uint8Array {\n    const bufferLength = this.analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    this.analyser.getByteFrequencyData(dataArray);\n    return dataArray;\n  }\n\n  /**\n   * Get time domain data for visualization\n   */\n  public getTimeDomainData(): Uint8Array {\n    const bufferLength = this.analyser.fftSize;\n    const dataArray = new Uint8Array(bufferLength);\n    this.analyser.getByteTimeDomainData(dataArray);\n    return dataArray;\n  }\n\n  /**\n   * Analyze audio for neural patterns\n   */\n  public analyzeNeuralPatterns(): Record<string, number> {\n    const frequencyData = this.getFrequencyData();\n    const sampleRate = this.context.sampleRate;\n    const results: Record<string, number> = {};\n    \n    // Calculate energy in each neural band\n    Object.entries(this.neuralBands).forEach(([band, { min, max }]) => {\n      const startIndex = Math.floor((min / (sampleRate / 2)) * frequencyData.length);\n      const endIndex = Math.min(\n        Math.ceil((max / (sampleRate / 2)) * frequencyData.length),\n        frequencyData.length - 1\n      );\n      \n      let sum = 0;\n      for (let i = startIndex; i <= endIndex; i++) {\n        sum += frequencyData[i];\n      }\n      \n      results[band] = sum / (endIndex - startIndex + 1);\n    });\n    \n    return results;\n  }\n\n  /**\n   * Clean up resources\n   */\n  public dispose(): void {\n    this.stop();\n    \n    if (this.processor) {\n      this.processor.disconnect();\n      this.processor = null;\n    }\n    \n    this.analyser.disconnect();\n    \n    if (this.context.state !== 'closed') {\n      this.context.close();\n    }\n    \n    this.removeAllListeners();\n  }\n}\n"]}