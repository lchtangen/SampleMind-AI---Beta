#!/bin/bash
# Docker Kali Linux Pentesting Setup for WiFi Monitoring
# This script sets up a Docker-based Kali environment with WiFi adapter support

set -e

echo "🔧 Docker Kali Linux Pentesting Setup"
echo "======================================"

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Get WiFi interface name
WIFI_INTERFACE="${1:-wlp0s20f3}"

echo -e "${BLUE}📡 WiFi Interface: ${WIFI_INTERFACE}${NC}"

# Step 1: Create Dockerfile for Kali with pentesting tools
echo -e "${GREEN}Step 1: Creating Kali Dockerfile with pentesting tools...${NC}"
cat > /tmp/Dockerfile.kali << 'EOF'
FROM kalilinux/kali-rolling

# Avoid interactive prompts
ENV DEBIAN_FRONTEND=noninteractive

# Update and install essential packages
RUN apt-get update && apt-get install -y \
    kali-linux-core \
    aircrack-ng \
    wireshark \
    kismet \
    wifite \
    reaver \
    bully \
    hostapd \
    hostapd-wpe \
    dnsmasq \
    macchanger \
    ettercap-text-only \
    tcpdump \
    nmap \
    masscan \
    netcat-traditional \
    metasploit-framework \
    sqlmap \
    nikto \
    burpsuite \
    zaproxy \
    hydra \
    john \
    hashcat \
    wordlists \
    seclists \
    iw \
    wireless-tools \
    net-tools \
    iproute2 \
    iputils-ping \
    dnsutils \
    curl \
    wget \
    git \
    vim \
    tmux \
    python3 \
    python3-pip \
    && rm -rf /var/lib/apt/lists/*

# Install additional Python tools
RUN pip3 install --break-system-packages \
    scapy \
    impacket \
    pwntools

# Set working directory
WORKDIR /root

# Create directories for tools and captures
RUN mkdir -p /root/captures /root/wordlists /root/tools

# Copy wordlists to accessible location
RUN if [ -f /usr/share/wordlists/rockyou.txt.gz ]; then \
        gunzip /usr/share/wordlists/rockyou.txt.gz; \
    fi

CMD ["/bin/bash"]
EOF

# Step 2: Build Docker image
echo -e "${GREEN}Step 2: Building Kali Docker image (this may take 10-15 minutes)...${NC}"
docker build -t kali-pentest:latest -f /tmp/Dockerfile.kali /tmp/

# Step 3: Create helper scripts
echo -e "${GREEN}Step 3: Creating helper scripts...${NC}"

# Script to start Kali container with WiFi access
cat > ~/start-kali-wifi.sh << 'EOFSCRIPT'
#!/bin/bash
# Start Kali container with WiFi adapter access

WIFI_INTERFACE="${1:-wlp0s20f3}"
CONTAINER_NAME="kali-wifi-pentest"

echo "🚀 Starting Kali container with WiFi adapter: $WIFI_INTERFACE"

# Stop existing container if running
docker stop $CONTAINER_NAME 2>/dev/null || true
docker rm $CONTAINER_NAME 2>/dev/null || true

# Start container with network privileges
docker run -it --rm \
    --name $CONTAINER_NAME \
    --privileged \
    --net=host \
    -v ~/kali-captures:/root/captures \
    -v ~/kali-tools:/root/tools \
    -e DISPLAY=$DISPLAY \
    -v /tmp/.X11-unix:/tmp/.X11-unix \
    kali-pentest:latest \
    /bin/bash
EOFSCRIPT

chmod +x ~/start-kali-wifi.sh

# Script to put WiFi adapter in monitor mode
cat > ~/wifi-monitor-mode.sh << 'EOFSCRIPT'
#!/bin/bash
# Put WiFi adapter into monitor mode

WIFI_INTERFACE="${1:-wlp0s20f3}"

echo "🔍 Putting $WIFI_INTERFACE into monitor mode..."

# Kill interfering processes
sudo airmon-ng check kill

# Start monitor mode
sudo airmon-ng start $WIFI_INTERFACE

# Show new interface name (usually wlan0mon or wlp0s20f3mon)
echo "✅ Monitor mode enabled. New interface:"
iwconfig 2>&1 | grep -i monitor

echo ""
echo "📝 Note: Your interface is now in monitor mode (likely ${WIFI_INTERFACE}mon)"
echo "To return to managed mode, run: sudo airmon-ng stop ${WIFI_INTERFACE}mon"
EOFSCRIPT

chmod +x ~/wifi-monitor-mode.sh

# Script to restore WiFi to managed mode
cat > ~/wifi-managed-mode.sh << 'EOFSCRIPT'
#!/bin/bash
# Restore WiFi adapter to managed mode

WIFI_INTERFACE="${1:-wlp0s20f3mon}"

echo "🔄 Restoring $WIFI_INTERFACE to managed mode..."

# Stop monitor mode
sudo airmon-ng stop $WIFI_INTERFACE

# Restart NetworkManager
sudo systemctl restart NetworkManager

echo "✅ Managed mode restored"
iwconfig 2>&1 | grep -E "Mode:"
EOFSCRIPT

chmod +x ~/wifi-managed-mode.sh

# Create directories for captures and tools
mkdir -p ~/kali-captures ~/kali-tools

# Step 4: Create usage guide
cat > ~/KALI-DOCKER-USAGE.md << 'EOFGUIDE'
# 🐉 Kali Docker Pentesting & WiFi Monitoring Guide

## 🚀 Quick Start

### 1. Start Kali Container with WiFi Access
```bash
~/start-kali-wifi.sh wlp0s20f3
```

### 2. Enable WiFi Monitor Mode (from host Ubuntu)
```bash
~/wifi-monitor-mode.sh wlp0s20f3
```

### 3. Inside Container, Verify Monitor Mode
```bash
iwconfig
# You should see wlp0s20f3mon in Monitor mode
```

## 📡 WiFi Pentesting Commands

### WiFi Network Scanning
```bash
# Scan for WiFi networks (airodump-ng)
airodump-ng wlp0s20f3mon

# Scan specific channel
airodump-ng -c 6 wlp0s20f3mon

# Scan and save to file
airodump-ng -w /root/captures/scan wlp0s20f3mon
```

### WPA/WPA2 Handshake Capture
```bash
# Target specific network and capture handshake
airodump-ng -c [CHANNEL] --bssid [AP_MAC] -w /root/captures/handshake wlp0s20f3mon

# In another terminal, deauth clients to force handshake
aireplay-ng --deauth 10 -a [AP_MAC] wlp0s20f3mon
```

### WPA/WPA2 Password Cracking
```bash
# Crack with wordlist
aircrack-ng -w /usr/share/wordlists/rockyou.txt /root/captures/handshake-01.cap

# Crack with custom wordlist
aircrack-ng -w /root/wordlists/custom.txt /root/captures/handshake-01.cap
```

### Automated WiFi Attacks with Wifite
```bash
# Automated WPA/WPA2 attack
wifite --wpa

# Attack all networks
wifite

# Attack with custom wordlist
wifite --dict /root/wordlists/custom.txt
```

### WPS Attacks
```bash
# Scan for WPS-enabled networks
wash -i wlp0s20f3mon

# WPS PIN attack with Reaver
reaver -i wlp0s20f3mon -b [AP_MAC] -vv

# WPS pixie-dust attack with Bully
bully wlp0s20f3mon -b [AP_MAC] -d
```

## 🌐 Network Pentesting

### Network Scanning
```bash
# Quick scan
nmap -sn 192.168.1.0/24

# Full port scan
nmap -p- -A 192.168.1.1

# Fast scan with masscan
masscan -p1-65535 192.168.1.0/24 --rate=1000
```

### Packet Sniffing
```bash
# Capture packets with tcpdump
tcpdump -i wlp0s20f3mon -w /root/captures/traffic.pcap

# Monitor specific traffic
tcpdump -i wlp0s20f3mon port 80 or port 443

# Capture with Wireshark (requires X11 forwarding)
wireshark
```

### Man-in-the-Middle Attacks
```bash
# ARP spoofing with ettercap
ettercap -T -M arp:remote /[GATEWAY_IP]// /[TARGET_IP]//

# DNS spoofing
ettercap -T -M arp -P dns_spoof /[GATEWAY_IP]// /[TARGET_IP]//
```

## 🔓 Password Cracking

### John the Ripper
```bash
# Crack password hashes
john --wordlist=/usr/share/wordlists/rockyou.txt hashes.txt

# Show cracked passwords
john --show hashes.txt
```

### Hashcat
```bash
# WPA/WPA2 cracking
hashcat -m 2500 handshake.hccapx /usr/share/wordlists/rockyou.txt

# MD5 cracking
hashcat -m 0 md5hashes.txt /usr/share/wordlists/rockyou.txt
```

### Hydra (Online password attacks)
```bash
# SSH brute force
hydra -l root -P /usr/share/wordlists/rockyou.txt ssh://192.168.1.1

# HTTP form brute force
hydra -l admin -P /usr/share/wordlists/rockyou.txt 192.168.1.1 http-post-form "/login:username=^USER^&password=^PASS^:F=incorrect"
```

## 🕷️ Web Application Testing

### Nikto Web Scanner
```bash
nikto -h http://target.com
```

### SQLMap
```bash
# Test for SQL injection
sqlmap -u "http://target.com/page?id=1" --dbs

# Dump database
sqlmap -u "http://target.com/page?id=1" -D database --dump
```

### Burp Suite
```bash
burpsuite
```

## 🎭 Spoofing & Anonymity

### MAC Address Spoofing
```bash
# Change MAC address
macchanger -r wlp0s20f3mon

# Set specific MAC
macchanger -m 00:11:22:33:44:55 wlp0s20f3mon

# Show current MAC
macchanger -s wlp0s20f3mon
```

## 💾 Saving Captures

All captures are saved to `~/kali-captures/` on your host machine.

```bash
# From inside container
ls -lh /root/captures/

# From host Ubuntu
ls -lh ~/kali-captures/
```

## 🔄 Exiting and Cleanup

### Exit Container
```bash
exit
```

### Restore WiFi to Normal Mode
```bash
~/wifi-managed-mode.sh wlp0s20f3mon
```

### Reconnect to WiFi
```bash
nmcli device wifi list
nmcli device wifi connect "SSID" password "PASSWORD"
```

## ⚠️ Important Legal Notes

**ONLY use these tools on:**
- Your own networks and devices
- Networks you have explicit written permission to test
- Authorized penetration testing engagements
- Lab environments you control

**Unauthorized access is illegal and unethical.**

## 🛠️ Troubleshooting

### WiFi adapter not visible in container
```bash
# From host, verify adapter exists
iwconfig

# Restart container with --net=host and --privileged
```

### Monitor mode not working
```bash
# Kill interfering processes
sudo airmon-ng check kill

# Restart NetworkManager if needed
sudo systemctl restart NetworkManager
```

### Permission denied errors
```bash
# Ensure container is running with --privileged flag
```

## 📚 Additional Resources

- Kali Linux Documentation: https://www.kali.org/docs/
- Aircrack-ng Tutorial: https://www.aircrack-ng.org/doku.php
- OWASP Testing Guide: https://owasp.org/www-project-web-security-testing-guide/

---
**Created for ethical security research and authorized penetration testing only.**
EOFGUIDE

echo ""
echo -e "${GREEN}✅ Setup Complete!${NC}"
echo ""
echo -e "${BLUE}📋 What was created:${NC}"
echo "  - Kali Docker image: kali-pentest:latest"
echo "  - Start script: ~/start-kali-wifi.sh"
echo "  - Monitor mode script: ~/wifi-monitor-mode.sh"
echo "  - Managed mode script: ~/wifi-managed-mode.sh"
echo "  - Usage guide: ~/KALI-DOCKER-USAGE.md"
echo "  - Capture directory: ~/kali-captures/"
echo "  - Tools directory: ~/kali-tools/"
echo ""
echo -e "${BLUE}🚀 Quick Start:${NC}"
echo "  1. Read the guide: cat ~/KALI-DOCKER-USAGE.md"
echo "  2. Start Kali: ~/start-kali-wifi.sh"
echo "  3. Enable monitor mode: ~/wifi-monitor-mode.sh"
echo ""
echo -e "${RED}⚠️  LEGAL WARNING:${NC}"
echo "  Only use these tools on networks you own or have explicit permission to test."
echo "  Unauthorized access is illegal."
echo ""
