# =============================================================================
# Docker Compose - Production
# Optimized production deployment with resource limits and security
# =============================================================================

version: '3.8'

services:
  # =============================================================================
  # Backend API Service
  # =============================================================================
  backend:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.backend
      cache_from:
        - samplemind/backend:latest
    image: samplemind/backend:${VERSION:-latest}
    container_name: samplemind-backend
    restart: always
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - MONGODB_URL=${MONGODB_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${REDIS_URL}
      - CELERY_RESULT_BACKEND=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=info
      - WORKERS=4
    volumes:
      - backend-data:/app/data
      - backend-logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - samplemind-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # Celery Worker Service
  # =============================================================================
  celery-worker:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.celery
      cache_from:
        - samplemind/celery:latest
    image: samplemind/celery:${VERSION:-latest}
    container_name: samplemind-worker
    restart: always
    environment:
      - ENVIRONMENT=production
      - MONGODB_URL=${MONGODB_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${REDIS_URL}
      - CELERY_RESULT_BACKEND=${REDIS_URL}
      - GOOGLE_AI_API_KEY=${GOOGLE_AI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CELERY_LOG_LEVEL=info
      - CELERY_WORKER_CONCURRENCY=4
      - CELERY_WORKER_MAX_TASKS_PER_CHILD=1000
      - CELERY_TASK_TIME_LIMIT=3600
      - CELERY_TASK_SOFT_TIME_LIMIT=3300
    volumes:
      - backend-data:/app/data
      - backend-logs:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - samplemind-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 3G
        reservations:
          cpus: '1.0'
          memory: 1G
    command: ["worker"]
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # Celery Beat (Scheduler) Service
  # =============================================================================
  celery-beat:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.celery
    image: samplemind/celery:${VERSION:-latest}
    container_name: samplemind-beat
    restart: always
    environment:
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${REDIS_URL}
      - CELERY_LOG_LEVEL=info
    volumes:
      - celerybeat-schedule:/app/celerybeat-schedule
    depends_on:
      - redis
    networks:
      - samplemind-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: ["beat"]
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # =============================================================================
  # Flower (Celery Monitoring) Service
  # =============================================================================
  flower:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.celery
    image: samplemind/celery:${VERSION:-latest}
    container_name: samplemind-flower
    restart: always
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=${REDIS_URL}
      - CELERY_RESULT_BACKEND=${REDIS_URL}
      - FLOWER_PORT=5555
      - FLOWER_BASIC_AUTH=${FLOWER_BASIC_AUTH:-admin:changeme}
    depends_on:
      - redis
      - celery-worker
    networks:
      - samplemind-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: ["flower"]
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # =============================================================================
  # Frontend Service
  # =============================================================================
  frontend:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.frontend
      args:
        VITE_API_URL=${API_URL}
      cache_from:
        - samplemind/frontend:latest
    image: samplemind/frontend:${VERSION:-latest}
    container_name: samplemind-frontend
    restart: always
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${API_URL}
    depends_on:
      - backend
    networks:
      - samplemind-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # =============================================================================
  # MongoDB Database
  # =============================================================================
  mongodb:
    image: mongo:7.0
    container_name: samplemind-mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=samplemind
    volumes:
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb
      - ../../config/mongodb-indexes.js:/docker-entrypoint-initdb.d/init-indexes.js:ro
    networks:
      - samplemind-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # Redis Cache & Message Broker
  # =============================================================================
  redis:
    image: redis:7.2-alpine
    container_name: samplemind-redis
    restart: always
    ports:
      - "6379:6379"
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfilename "appendonly.aof"
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis-data:/data
    networks:
      - samplemind-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # ChromaDB Vector Database
  # =============================================================================
  chromadb:
    image: chromadb/chroma:latest
    container_name: samplemind-chromadb
    restart: always
    ports:
      - "8002:8000"
    volumes:
      - chroma-data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - ANONYMIZED_TELEMETRY=FALSE
      - CHROMA_SERVER_AUTH_CREDENTIALS=${CHROMA_AUTH_TOKEN}
    networks:
      - samplemind-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # Nginx Reverse Proxy
  # =============================================================================
  nginx:
    image: nginx:1.25-alpine
    container_name: samplemind-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - samplemind-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# =============================================================================
# Named Volumes
# =============================================================================
volumes:
  backend-data:
    driver: local
  backend-logs:
    driver: local
  mongodb-data:
    driver: local
  mongodb-config:
    driver: local
  redis-data:
    driver: local
  chroma-data:
    driver: local
  celerybeat-schedule:
    driver: local
  nginx-logs:
    driver: local

# =============================================================================
# Networks
# =============================================================================
networks:
  samplemind-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
