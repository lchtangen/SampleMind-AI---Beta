# =============================================================================
# STAGE 1: Dependencies Stage
# =============================================================================
FROM node:20-alpine AS deps

LABEL maintainer="SampleMind AI <team@samplemind.ai>"
LABEL description="SampleMind AI Frontend - Dependencies Stage"

# Install libc6-compat for Alpine compatibility
RUN apk add --no-cache libc6-compat

WORKDIR /app

# Copy package files for dependency installation
COPY web-app/package.json web-app/package-lock.json ./

# Install dependencies with clean install
RUN npm ci --only=production --ignore-scripts && \
    npm cache clean --force

# =============================================================================
# STAGE 2: Builder Stage
# =============================================================================
FROM node:20-alpine AS builder

WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy all application files
COPY web-app/ .

# Set build-time environment variables
ARG VITE_API_URL=http://localhost:8000
ENV VITE_API_URL=$VITE_API_URL
ENV NODE_ENV=production

# Build the application
RUN npm run build && \
    # Remove source maps in production for security
    find dist -name "*.map" -type f -delete

# =============================================================================
# STAGE 3: Runtime Stage with Nginx
# =============================================================================
FROM nginx:1.25-alpine

LABEL maintainer="SampleMind AI <team@samplemind.ai>"
LABEL description="SampleMind AI v1.0.0 Phoenix Beta - Frontend"
LABEL version="1.0.0-phoenix-beta"

# Install curl for health checks
RUN apk add --no-cache curl

# Copy custom nginx configuration
COPY deployment/docker/nginx.conf /etc/nginx/nginx.conf

# Create nginx user for running the service
RUN addgroup -g 101 -S nginx && \
    adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx

# Copy built application from builder
COPY --from=builder --chown=nginx:nginx /app/dist /usr/share/nginx/html

# Create necessary directories and set permissions
RUN mkdir -p /var/cache/nginx /var/log/nginx /var/run && \
    chown -R nginx:nginx /var/cache/nginx /var/log/nginx /var/run && \
    chmod -R 755 /var/cache/nginx /var/log/nginx && \
    # Remove default nginx config
    rm -f /etc/nginx/conf.d/default.conf && \
    # Test nginx configuration
    nginx -t

# Switch to non-root user
USER nginx

# Expose port
EXPOSE 3000

# Add health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/ || exit 1

# Add labels for better container management
LABEL org.opencontainers.image.source="https://github.com/lchtangen/SampleMind-AI---Beta"
LABEL org.opencontainers.image.documentation="https://docs.samplemind.ai"
LABEL org.opencontainers.image.licenses="MIT"

# Start nginx in foreground
CMD ["nginx", "-g", "daemon off;"]
