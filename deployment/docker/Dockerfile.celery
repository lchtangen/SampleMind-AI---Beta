# =============================================================================
# Celery Worker Dockerfile
# Based on optimized backend with Celery-specific configurations
# =============================================================================

# Inherit from the optimized backend image
FROM python:3.12-slim as builder

LABEL maintainer="SampleMind AI <team@samplemind.ai>"
LABEL description="SampleMind AI Celery Worker - Builder Stage"

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    libsndfile1-dev \
    ffmpeg \
    git \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements
COPY requirements.txt .

# Install Python dependencies in virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt && \
    # Install Celery monitoring tools
    pip install --no-cache-dir flower && \
    # Cleanup
    find /opt/venv -type d -name __pycache__ -exec rm -rf {} + && \
    find /opt/venv -type f -name "*.pyc" -delete && \
    find /opt/venv -type f -name "*.pyo" -delete

# =============================================================================
# STAGE 2: Runtime Stage
# =============================================================================
FROM python:3.12-slim

LABEL maintainer="SampleMind AI <team@samplemind.ai>"
LABEL description="SampleMind AI v1.0.0 Phoenix Beta - Celery Worker"
LABEL version="1.0.0-phoenix-beta"

WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    libsndfile1 \
    ffmpeg \
    curl \
    procps \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv

# Set environment variables
ENV PATH="/opt/venv/bin:$PATH" \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONOPTIMIZE=2 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    # Celery-specific settings
    C_FORCE_ROOT=false \
    CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP=true

# Create non-root user
RUN groupadd -r -g 1000 samplemind && \
    useradd -r -u 1000 -g samplemind -m -s /bin/bash samplemind && \
    mkdir -p /app/data /app/logs /app/cache /app/celerybeat-schedule && \
    chown -R samplemind:samplemind /app

# Copy application code
COPY --chown=samplemind:samplemind src/ /app/src/
COPY --chown=samplemind:samplemind config/ /app/config/
COPY --chown=samplemind:samplemind pyproject.toml /app/
COPY --chown=samplemind:samplemind README.md /app/

# Copy entrypoint script
COPY --chown=samplemind:samplemind deployment/docker/celery-entrypoint.sh /app/
RUN chmod +x /app/celery-entrypoint.sh

# Switch to non-root user
USER samplemind

# Add health check for worker
HEALTHCHECK --interval=60s --timeout=15s --start-period=60s --retries=3 \
    CMD celery -A src.samplemind.core.tasks.celery_app inspect ping -d celery@$HOSTNAME || exit 1

# Add labels
LABEL org.opencontainers.image.source="https://github.com/lchtangen/SampleMind-AI---Beta"
LABEL org.opencontainers.image.documentation="https://docs.samplemind.ai"
LABEL org.opencontainers.image.licenses="MIT"

# Use entrypoint for flexibility (worker, beat, flower)
ENTRYPOINT ["/app/celery-entrypoint.sh"]

# Default: Run as worker
CMD ["worker"]