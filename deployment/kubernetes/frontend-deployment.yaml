# =============================================================================
# SampleMind AI - Frontend Deployment
# Nginx-based static file serving with auto-scaling
# =============================================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: samplemind-production
  labels:
    app: samplemind
    component: frontend
    tier: web
    version: "1.0"
  annotations:
    description: "SampleMind AI Frontend Web Application"
spec:
  # Initial replicas (HPA will manage this)
  replicas: 2
  
  selector:
    matchLabels:
      app: samplemind
      component: frontend
      tier: web
  
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  
  minReadySeconds: 5
  revisionHistoryLimit: 10
  
  template:
    metadata:
      labels:
        app: samplemind
        component: frontend
        tier: web
        version: "1.0"
      annotations:
        prometheus.io/scrape: "false"
    spec:
      serviceAccountName: samplemind-frontend
      
      securityContext:
        runAsNonRoot: true
        runAsUser: 101  # nginx user
        fsGroup: 101
        seccompProfile:
          type: RuntimeDefault
      
      containers:
      - name: frontend
        image: samplemind/frontend:latest
        imagePullPolicy: Always
        
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        
        envFrom:
        - configMapRef:
            name: frontend-config
        
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
            ephemeral-storage: "500Mi"
          limits:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "1Gi"
        
        # Liveness probe
        livenessProbe:
          httpGet:
            path: /
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        # Readiness probe
        readinessProbe:
          httpGet:
            path: /
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 3
        
        # Startup probe
        startupProbe:
          httpGet:
            path: /
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 2
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 15
        
        volumeMounts:
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-run
          mountPath: /var/run
        - name: tmp
          mountPath: /tmp
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 101
          capabilities:
            drop:
              - ALL
            add:
              - NET_BIND_SERVICE
      
      volumes:
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-run
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      
      imagePullSecrets:
      - name: samplemind-registry
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - frontend
              topologyKey: kubernetes.io/hostname
      
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            component: frontend
      
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      restartPolicy: Always