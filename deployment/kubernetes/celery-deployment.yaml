# =============================================================================
# SampleMind AI - Celery Worker & Beat Deployments
# Separate deployments for workers and scheduler
# =============================================================================

# =============================================================================
# Celery Worker Deployment
# =============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-worker
  namespace: samplemind-production
  labels:
    app: samplemind
    component: celery-worker
    tier: worker
    version: "1.0"
  annotations:
    description: "Celery worker for background task processing"
spec:
  # Initial replicas (HPA will manage this)
  replicas: 2
  
  selector:
    matchLabels:
      app: samplemind
      component: celery-worker
      tier: worker
  
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  
  minReadySeconds: 10
  revisionHistoryLimit: 10
  
  template:
    metadata:
      labels:
        app: samplemind
        component: celery-worker
        tier: worker
        version: "1.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      serviceAccountName: samplemind-celery
      
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      # Init containers
      initContainers:
      - name: wait-for-redis
        image: busybox:1.36
        command: ['sh', '-c']
        args:
          - |
            until nc -z redis-service 6379; do
              echo "Waiting for Redis..."
              sleep 2
            done
            echo "Redis is ready!"
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
              - ALL
      
      - name: wait-for-mongodb
        image: busybox:1.36
        command: ['sh', '-c']
        args:
          - |
            until nc -z mongodb-service 27017; do
              echo "Waiting for MongoDB..."
              sleep 2
            done
            echo "MongoDB is ready!"
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
              - ALL
      
      containers:
      - name: celery-worker
        image: samplemind/backend:latest
        imagePullPolicy: Always
        
        # Celery worker command
        command: ["celery"]
        args:
          - "-A"
          - "src.samplemind.core.tasks.celery_app"
          - "worker"
          - "--loglevel=info"
          - "--concurrency=4"
          - "--max-tasks-per-child=1000"
          - "--queues=default,audio_processing,ai_analysis,embeddings,priority"
          - "--prefetch-multiplier=4"
        
        ports:
        - name: metrics
          containerPort: 9090
          protocol: TCP
        
        envFrom:
        - configMapRef:
            name: samplemind-config
        - configMapRef:
            name: celery-config
        - secretRef:
            name: samplemind-secrets
        
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
            ephemeral-storage: "2Gi"
          limits:
            memory: "3Gi"
            cpu: "2000m"
            ephemeral-storage: "10Gi"
        
        # Liveness probe
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - celery -A src.samplemind.core.tasks.celery_app inspect ping -d celery@$HOSTNAME
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        
        # Readiness probe
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - celery -A src.samplemind.core.tasks.celery_app inspect active -d celery@$HOSTNAME
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        
        volumeMounts:
        - name: data
          mountPath: /app/data
        - name: logs
          mountPath: /app/logs
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/.cache
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
              - ALL
      
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: backend-data-pvc
      - name: logs
        persistentVolumeClaim:
          claimName: celery-logs-pvc
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      
      imagePullSecrets:
      - name: samplemind-registry
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - celery-worker
              topologyKey: kubernetes.io/hostname
      
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            component: celery-worker
      
      terminationGracePeriodSeconds: 60
      dnsPolicy: ClusterFirst
      restartPolicy: Always

---
# =============================================================================
# Celery Beat Deployment (Scheduler)
# =============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: celery-beat
  namespace: samplemind-production
  labels:
    app: samplemind
    component: celery-beat
    tier: scheduler
    version: "1.0"
  annotations:
    description: "Celery beat scheduler for periodic tasks"
spec:
  # Only one beat instance should run
  replicas: 1
  
  selector:
    matchLabels:
      app: samplemind
      component: celery-beat
      tier: scheduler
  
  strategy:
    type: Recreate  # Only one beat instance at a time
  
  template:
    metadata:
      labels:
        app: samplemind
        component: celery-beat
        tier: scheduler
        version: "1.0"
    spec:
      serviceAccountName: samplemind-celery
      
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      # Init containers
      initContainers:
      - name: wait-for-redis
        image: busybox:1.36
        command: ['sh', '-c']
        args:
          - |
            until nc -z redis-service 6379; do
              echo "Waiting for Redis..."
              sleep 2
            done
            echo "Redis is ready!"
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
              - ALL
      
      containers:
      - name: celery-beat
        image: samplemind/backend:latest
        imagePullPolicy: Always
        
        # Celery beat command
        command: ["celery"]
        args:
          - "-A"
          - "src.samplemind.core.tasks.celery_app"
          - "beat"
          - "--loglevel=info"
          - "--schedule=/app/celerybeat-schedule/celerybeat-schedule.db"
          - "--pidfile=/tmp/celerybeat.pid"
        
        envFrom:
        - configMapRef:
            name: samplemind-config
        - configMapRef:
            name: celery-config
        - secretRef:
            name: samplemind-secrets
        
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "2Gi"
        
        # Liveness probe
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - test -f /tmp/celerybeat.pid
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        volumeMounts:
        - name: celerybeat-schedule
          mountPath: /app/celerybeat-schedule
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
              - ALL
      
      volumes:
      - name: celerybeat-schedule
        persistentVolumeClaim:
          claimName: celerybeat-schedule-pvc
      - name: tmp
        emptyDir: {}
      - name: logs
        persistentVolumeClaim:
          claimName: celery-logs-pvc
      
      imagePullSecrets:
      - name: samplemind-registry
      
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      restartPolicy: Always

---
# =============================================================================
# Flower Deployment (Celery Monitoring)
# =============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flower
  namespace: samplemind-production
  labels:
    app: samplemind
    component: flower
    tier: monitoring
    version: "1.0"
  annotations:
    description: "Flower web interface for Celery monitoring"
spec:
  replicas: 1
  
  selector:
    matchLabels:
      app: samplemind
      component: flower
      tier: monitoring
  
  template:
    metadata:
      labels:
        app: samplemind
        component: flower
        tier: monitoring
        version: "1.0"
    spec:
      serviceAccountName: samplemind-celery
      
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      
      # Init container
      initContainers:
      - name: wait-for-redis
        image: busybox:1.36
        command: ['sh', '-c']
        args:
          - |
            until nc -z redis-service 6379; do
              echo "Waiting for Redis..."
              sleep 2
            done
            echo "Redis is ready!"
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
              - ALL
      
      containers:
      - name: flower
        image: samplemind/backend:latest
        imagePullPolicy: Always
        
        # Flower command
        command: ["celery"]
        args:
          - "-A"
          - "src.samplemind.core.tasks.celery_app"
          - "flower"
          - "--port=5555"
          - "--loglevel=info"
        
        ports:
        - name: http
          containerPort: 5555
          protocol: TCP
        
        envFrom:
        - configMapRef:
            name: samplemind-config
        - secretRef:
            name: samplemind-secrets
        
        env:
        - name: FLOWER_PORT
          value: "5555"
        
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        # Liveness probe
        livenessProbe:
          httpGet:
            path: /healthcheck
            port: 5555
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        # Readiness probe
        readinessProbe:
          httpGet:
            path: /healthcheck
            port: 5555
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
              - ALL
      
      volumes:
      - name: tmp
        emptyDir: {}
      
      imagePullSecrets:
      - name: samplemind-registry
      
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      restartPolicy: Always