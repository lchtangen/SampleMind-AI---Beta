# =============================================================================
# SampleMind AI - Network Policies
# Network security and isolation between pods
# =============================================================================

# =============================================================================
# Default Deny All Ingress Traffic
# =============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-ingress
  namespace: samplemind-production
  labels:
    app: samplemind
spec:
  podSelector: {}  # Applies to all pods in namespace
  policyTypes:
  - Ingress

---
# =============================================================================
# Default Deny All Egress Traffic
# =============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-egress
  namespace: samplemind-production
  labels:
    app: samplemind
spec:
  podSelector: {}
  policyTypes:
  - Egress

---
# =============================================================================
# Backend API Network Policy
# =============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backend-network-policy
  namespace: samplemind-production
  labels:
    app: samplemind
    component: backend
spec:
  podSelector:
    matchLabels:
      component: backend
  
  policyTypes:
  - Ingress
  - Egress
  
  # Ingress rules - who can connect TO backend
  ingress:
  # Allow from ingress controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 9090
  
  # Allow from frontend
  - from:
    - podSelector:
        matchLabels:
          component: frontend
    ports:
    - protocol: TCP
      port: 8000
  
  # Allow from Prometheus for metrics
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 9090
  
  # Egress rules - where backend can connect TO
  egress:
  # Allow to MongoDB
  - to:
    - podSelector:
        matchLabels:
          component: mongodb
    ports:
    - protocol: TCP
      port: 27017
  
  # Allow to Redis
  - to:
    - podSelector:
        matchLabels:
          component: redis
    ports:
    - protocol: TCP
      port: 6379
  
  # Allow to ChromaDB
  - to:
    - podSelector:
        matchLabels:
          component: chromadb
    ports:
    - protocol: TCP
      port: 8000
  
  # Allow DNS
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  
  # Allow external HTTPS (for AI APIs)
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 443
  
  # Allow external HTTP
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 80

---
# =============================================================================
# Frontend Network Policy
# =============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: frontend-network-policy
  namespace: samplemind-production
  labels:
    app: samplemind
    component: frontend
spec:
  podSelector:
    matchLabels:
      component: frontend
  
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  # Allow from ingress controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3000
  
  egress:
  # Allow to backend
  - to:
    - podSelector:
        matchLabels:
          component: backend
    ports:
    - protocol: TCP
      port: 8000
  
  # Allow DNS
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  
  # Allow external HTTPS
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 443

---
# =============================================================================
# Celery Worker Network Policy
# =============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: celery-worker-network-policy
  namespace: samplemind-production
  labels:
    app: samplemind
    component: celery-worker
spec:
  podSelector:
    matchLabels:
      component: celery-worker
  
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  # Allow from Prometheus for metrics
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
  
  egress:
  # Allow to MongoDB
  - to:
    - podSelector:
        matchLabels:
          component: mongodb
    ports:
    - protocol: TCP
      port: 27017
  
  # Allow to Redis (broker & result backend)
  - to:
    - podSelector:
        matchLabels:
          component: redis
    ports:
    - protocol: TCP
      port: 6379
  
  # Allow to ChromaDB
  - to:
    - podSelector:
        matchLabels:
          component: chromadb
    ports:
    - protocol: TCP
      port: 8000
  
  # Allow DNS
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  
  # Allow external HTTPS (for AI APIs)
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
# =============================================================================
# Celery Beat Network Policy
# =============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: celery-beat-network-policy
  namespace: samplemind-production
  labels:
    app: samplemind
    component: celery-beat
spec:
  podSelector:
    matchLabels:
      component: celery-beat
  
  policyTypes:
  - Egress
  
  egress:
  # Allow to Redis (broker)
  - to:
    - podSelector:
        matchLabels:
          component: redis
    ports:
    - protocol: TCP
      port: 6379
  
  # Allow DNS
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

---
# =============================================================================
# Flower Monitoring Network Policy
# =============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: flower-network-policy
  namespace: samplemind-production
  labels:
    app: samplemind
    component: flower
spec:
  podSelector:
    matchLabels:
      component: flower
  
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  # Allow from ingress controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 5555
  
  egress:
  # Allow to Redis
  - to:
    - podSelector:
        matchLabels:
          component: redis
    ports:
    - protocol: TCP
      port: 6379
  
  # Allow DNS
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53

---
# =============================================================================
# MongoDB Network Policy
# =============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mongodb-network-policy
  namespace: samplemind-production
  labels:
    app: samplemind
    component: mongodb
spec:
  podSelector:
    matchLabels:
      component: mongodb
  
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  # Allow from backend
  - from:
    - podSelector:
        matchLabels:
          component: backend
    ports:
    - protocol: TCP
      port: 27017
  
  # Allow from celery workers
  - from:
    - podSelector:
        matchLabels:
          component: celery-worker
    ports:
    - protocol: TCP
      port: 27017
  
  # Allow from monitoring (if needed)
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 27017
  
  egress:
  # Allow DNS
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53
  
  # Allow MongoDB replica set communication (if using replication)
  - to:
    - podSelector:
        matchLabels:
          component: mongodb
    ports:
    - protocol: TCP
      port: 27017

---
# =============================================================================
# Redis Network Policy
# =============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-network-policy
  namespace: samplemind-production
  labels:
    app: samplemind
    component: redis
spec:
  podSelector:
    matchLabels:
      component: redis
  
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  # Allow from backend
  - from:
    - podSelector:
        matchLabels:
          component: backend
    ports:
    - protocol: TCP
      port: 6379
  
  # Allow from celery workers
  - from:
    - podSelector:
        matchLabels:
          component: celery-worker
    ports:
    - protocol: TCP
      port: 6379
  
  # Allow from celery beat
  - from:
    - podSelector:
        matchLabels:
          component: celery-beat
    ports:
    - protocol: TCP
      port: 6379
  
  # Allow from flower
  - from:
    - podSelector:
        matchLabels:
          component: flower
    ports:
    - protocol: TCP
      port: 6379
  
  # Allow from monitoring
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 6379
  
  egress:
  # Allow DNS
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53
  
  # Allow Redis Sentinel communication (if using Sentinel)
  - to:
    - podSelector:
        matchLabels:
          component: redis
    ports:
    - protocol: TCP
      port: 26379

---
# =============================================================================
# ChromaDB Network Policy
# =============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: chromadb-network-policy
  namespace: samplemind-production
  labels:
    app: samplemind
    component: chromadb
spec:
  podSelector:
    matchLabels:
      component: chromadb
  
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  # Allow from backend
  - from:
    - podSelector:
        matchLabels:
          component: backend
    ports:
    - protocol: TCP
      port: 8000
  
  # Allow from celery workers
  - from:
    - podSelector:
        matchLabels:
          component: celery-worker
    ports:
    - protocol: TCP
      port: 8000
  
  egress:
  # Allow DNS
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: UDP
      port: 53

---
# =============================================================================
# Allow Traffic from Monitoring Namespace (Prometheus)
# =============================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-monitoring-ingress
  namespace: samplemind-production
  labels:
    app: samplemind
spec:
  podSelector:
    matchLabels:
      app: samplemind
  
  policyTypes:
  - Ingress
  
  ingress:
  # Allow from monitoring namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090  # Metrics port

---
# =============================================================================
# NOTES ON NETWORK POLICIES
# =============================================================================
#
# PREREQUISITES:
# - Network policies require a CNI plugin that supports them (Calico, Cilium, Weave Net, etc.)
# - Kubernetes network policies are namespaced
# - Default behavior without policies is to allow all traffic
#
# TESTING NETWORK POLICIES:
#
# 1. Test connectivity between pods:
#    kubectl run test-pod --rm -it --image=busybox -n samplemind-production -- sh
#    wget -O- http://backend-service:8000/health
#
# 2. Verify policy application:
#    kubectl describe networkpolicy backend-network-policy -n samplemind-production
#
# 3. Check logs for denied connections:
#    kubectl logs <pod-name> -n samplemind-production
#
# TROUBLESHOOTING:
#
# If connectivity issues occur:
# 1. Verify CNI plugin supports network policies
# 2. Check policy selectors match pod labels
# 3. Ensure DNS is allowed in egress rules
# 4. Verify namespaceSelector labels are correct
# 5. Test without network policies first
#
# SECURITY BEST PRACTICES:
# 1. Start with deny-all policies
# 2. Add specific allow rules as needed
# 3. Use least-privilege principle
# 4. Document all policy decisions
# 5. Regularly audit and update policies
# 6. Test policies in staging before production
# 7. Monitor denied connections
#
# CLOUD-SPECIFIC CONSIDERATIONS:
#
# AWS:
# - Use VPC CNI or Calico
# - Consider AWS Security Groups as additional layer
#
# GCP:
# - Use GKE Network Policies
# - Consider VPC firewall rules
#
# Azure:
# - Use Azure CNI with Network Policies
# - Consider NSG (Network Security Groups)
#
# =============================================================================