# =============================================================================
# SampleMind AI - Secrets Template
# IMPORTANT: This is a TEMPLATE. Replace all placeholder values before deployment!
# =============================================================================
# 
# SECURITY WARNING:
# 1. Never commit actual secrets to version control
# 2. Use Kubernetes Secrets management or external secret managers (e.g., HashiCorp Vault, AWS Secrets Manager)
# 3. Encode values in base64 before applying: echo -n "your-secret" | base64
# 4. Consider using sealed-secrets or SOPS for GitOps workflows
#
# To create secrets from command line:
# kubectl create secret generic samplemind-secrets \
#   --from-literal=MONGODB_URL='mongodb://user:pass@mongodb:27017/samplemind' \
#   --from-literal=REDIS_URL='redis://:password@redis:6379/0' \
#   --namespace=samplemind-production
# =============================================================================

apiVersion: v1
kind: Secret
metadata:
  name: samplemind-secrets
  namespace: samplemind-production
  labels:
    app: samplemind
    component: secrets
type: Opaque
stringData:
  # Database Credentials
  # MongoDB connection string with authentication
  MONGODB_URL: "mongodb://CHANGE_USERNAME:CHANGE_PASSWORD@mongodb-service:27017/samplemind?authSource=admin"
  MONGODB_USERNAME: "CHANGE_ME"
  MONGODB_PASSWORD: "CHANGE_ME"
  
  # Redis connection string with password
  REDIS_URL: "redis://:CHANGE_REDIS_PASSWORD@redis-service:6379/0"
  REDIS_PASSWORD: "CHANGE_ME"
  
  # Celery Broker & Result Backend
  CELERY_BROKER_URL: "redis://:CHANGE_REDIS_PASSWORD@redis-service:6379/1"
  CELERY_RESULT_BACKEND: "redis://:CHANGE_REDIS_PASSWORD@redis-service:6379/2"
  
  # ChromaDB Authentication
  CHROMADB_URL: "http://chromadb-service:8000"
  CHROMA_AUTH_TOKEN: "CHANGE_ME"
  
  # JWT Secret Key (CRITICAL - Generate strong random key!)
  # Generate with: openssl rand -hex 32
  JWT_SECRET_KEY: "CHANGE_THIS_TO_A_STRONG_RANDOM_SECRET_KEY_MINIMUM_32_CHARACTERS"
  SECRET_KEY: "CHANGE_THIS_TO_A_STRONG_RANDOM_SECRET_KEY_MINIMUM_32_CHARACTERS"
  
  # AI Provider API Keys
  # Google Gemini AI - https://makersuite.google.com/app/apikey
  GOOGLE_AI_API_KEY: "CHANGE_ME_YOUR_GOOGLE_API_KEY"
  
  # OpenAI - https://platform.openai.com/api-keys
  OPENAI_API_KEY: "CHANGE_ME_YOUR_OPENAI_API_KEY"
  
  # Anthropic (Claude) - https://console.anthropic.com/
  ANTHROPIC_API_KEY: "CHANGE_ME_YOUR_ANTHROPIC_API_KEY"
  
  # Flower (Celery Monitoring) Basic Auth
  # Format: username:password
  FLOWER_BASIC_AUTH: "admin:CHANGE_ME_STRONG_PASSWORD"
  
---
# TLS/SSL Certificate Secret (for HTTPS)
# Create this secret from your certificate files:
# kubectl create secret tls samplemind-tls \
#   --cert=path/to/tls.crt \
#   --key=path/to/tls.key \
#   --namespace=samplemind-production
apiVersion: v1
kind: Secret
metadata:
  name: samplemind-tls
  namespace: samplemind-production
  labels:
    app: samplemind
    component: tls
type: kubernetes.io/tls
data:
  # Base64 encoded certificate
  tls.crt: <base64-encoded-certificate>
  # Base64 encoded private key
  tls.key: <base64-encoded-private-key>

---
# Docker Registry Secret (if using private registry)
# Create this secret with:
# kubectl create secret docker-registry samplemind-registry \
#   --docker-server=registry.example.com \
#   --docker-username=your-username \
#   --docker-password=your-password \
#   --docker-email=your-email@example.com \
#   --namespace=samplemind-production
apiVersion: v1
kind: Secret
metadata:
  name: samplemind-registry
  namespace: samplemind-production
  labels:
    app: samplemind
    component: registry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: <base64-encoded-docker-config>

---
# External Secrets Example (using External Secrets Operator)
# Uncomment and configure if using external secret management
#
# apiVersion: external-secrets.io/v1beta1
# kind: ExternalSecret
# metadata:
#   name: samplemind-external-secrets
#   namespace: samplemind-production
# spec:
#   refreshInterval: 1h
#   secretStoreRef:
#     name: aws-secrets-manager  # or vault, gcpsm, etc.
#     kind: SecretStore
#   target:
#     name: samplemind-secrets
#     creationPolicy: Owner
#   data:
#   - secretKey: MONGODB_URL
#     remoteRef:
#       key: samplemind/prod/mongodb-url
#   - secretKey: GOOGLE_AI_API_KEY
#     remoteRef:
#       key: samplemind/prod/google-api-key
#   # Add more secrets as needed

---
# Sealed Secret Example (using Bitnami Sealed Secrets)
# Uncomment and use kubeseal to encrypt secrets
#
# apiVersion: bitnami.com/v1alpha1
# kind: SealedSecret
# metadata:
#   name: samplemind-sealed-secrets
#   namespace: samplemind-production
# spec:
#   encryptedData:
#     MONGODB_URL: AgA...  # Encrypted by kubeseal
#     GOOGLE_AI_API_KEY: AgB...  # Encrypted by kubeseal
#   template:
#     metadata:
#       name: samplemind-secrets
#       labels:
#         app: samplemind
#     type: Opaque

# =============================================================================
# DEPLOYMENT INSTRUCTIONS
# =============================================================================
#
# 1. Create a copy of this file: secrets-actual.yaml (add to .gitignore!)
# 2. Replace all CHANGE_ME placeholders with actual values
# 3. Generate strong passwords:
#    - MongoDB: openssl rand -base64 32
#    - Redis: openssl rand -base64 32
#    - JWT Secret: openssl rand -hex 32
# 4. Get API keys from provider websites
# 5. Apply secrets to cluster:
#    kubectl apply -f secrets-actual.yaml
# 6. Verify secrets:
#    kubectl get secrets -n samplemind-production
# 7. Delete the secrets-actual.yaml file after applying!
#
# PRODUCTION BEST PRACTICES:
# - Use external secret management (AWS Secrets Manager, HashiCorp Vault, etc.)
# - Rotate secrets regularly (every 90 days minimum)
# - Use least-privilege access for API keys
# - Enable audit logging for secret access
# - Use network policies to restrict secret access
# - Consider using workload identity for cloud providers
# =============================================================================