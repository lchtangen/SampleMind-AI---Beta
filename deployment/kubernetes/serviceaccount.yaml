# =============================================================================
# SampleMind AI - Service Accounts & RBAC
# Role-Based Access Control for secure pod permissions
# =============================================================================

# =============================================================================
# Backend Service Account
# =============================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: samplemind-backend
  namespace: samplemind-production
  labels:
    app: samplemind
    component: backend
automountServiceAccountToken: true

---
# Backend Role - Permissions within namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: samplemind-backend-role
  namespace: samplemind-production
  labels:
    app: samplemind
    component: backend
rules:
# Read ConfigMaps
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]

# Read Secrets
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]

# Read/Write PVCs
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "watch"]

# Read Pods (for health checks)
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

# Read Services
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get", "list", "watch"]

---
# Backend RoleBinding - Bind role to service account
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: samplemind-backend-rolebinding
  namespace: samplemind-production
  labels:
    app: samplemind
    component: backend
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: samplemind-backend-role
subjects:
- kind: ServiceAccount
  name: samplemind-backend
  namespace: samplemind-production

---
# =============================================================================
# Celery Service Account
# =============================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: samplemind-celery
  namespace: samplemind-production
  labels:
    app: samplemind
    component: celery
automountServiceAccountToken: true

---
# Celery Role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: samplemind-celery-role
  namespace: samplemind-production
  labels:
    app: samplemind
    component: celery
rules:
# Read ConfigMaps
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]

# Read Secrets
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]

# Read/Write PVCs
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "watch"]

# Read Pods (for worker coordination)
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

---
# Celery RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: samplemind-celery-rolebinding
  namespace: samplemind-production
  labels:
    app: samplemind
    component: celery
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: samplemind-celery-role
subjects:
- kind: ServiceAccount
  name: samplemind-celery
  namespace: samplemind-production

---
# =============================================================================
# Frontend Service Account
# =============================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: samplemind-frontend
  namespace: samplemind-production
  labels:
    app: samplemind
    component: frontend
automountServiceAccountToken: true

---
# Frontend Role (minimal permissions)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: samplemind-frontend-role
  namespace: samplemind-production
  labels:
    app: samplemind
    component: frontend
rules:
# Read ConfigMaps
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]

# Read Services (for backend discovery)
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get", "list"]

---
# Frontend RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: samplemind-frontend-rolebinding
  namespace: samplemind-production
  labels:
    app: samplemind
    component: frontend
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: samplemind-frontend-role
subjects:
- kind: ServiceAccount
  name: samplemind-frontend
  namespace: samplemind-production

---
# =============================================================================
# Monitoring Service Account (for Prometheus)
# =============================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: samplemind-monitoring
  namespace: samplemind-production
  labels:
    app: samplemind
    component: monitoring
automountServiceAccountToken: true

---
# Monitoring Role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: samplemind-monitoring-role
  namespace: samplemind-production
  labels:
    app: samplemind
    component: monitoring
rules:
# Read all resources for metrics collection
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "nodes", "configmaps"]
  verbs: ["get", "list", "watch"]

# Read deployments for monitoring
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets", "statefulsets"]
  verbs: ["get", "list", "watch"]

---
# Monitoring RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: samplemind-monitoring-rolebinding
  namespace: samplemind-production
  labels:
    app: samplemind
    component: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: samplemind-monitoring-role
subjects:
- kind: ServiceAccount
  name: samplemind-monitoring
  namespace: samplemind-production

---
# =============================================================================
# Cluster-Wide Permissions (ClusterRole & ClusterRoleBinding)
# Use sparingly and only when necessary
# =============================================================================

# Monitoring ClusterRole (for cross-namespace metrics)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: samplemind-monitoring-clusterrole
  labels:
    app: samplemind
    component: monitoring
rules:
# Read pods across all namespaces
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "nodes"]
  verbs: ["get", "list", "watch"]

# Read metrics
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]

---
# Monitoring ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: samplemind-monitoring-clusterrolebinding
  labels:
    app: samplemind
    component: monitoring
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: samplemind-monitoring-clusterrole
subjects:
- kind: ServiceAccount
  name: samplemind-monitoring
  namespace: samplemind-production

---
# =============================================================================
# Database Service Accounts
# =============================================================================

# MongoDB Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: samplemind-mongodb
  namespace: samplemind-production
  labels:
    app: samplemind
    component: mongodb
automountServiceAccountToken: true

---
# MongoDB Role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: samplemind-mongodb-role
  namespace: samplemind-production
  labels:
    app: samplemind
    component: mongodb
rules:
# Read ConfigMaps
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]

# Read Secrets
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]

# Manage PVCs
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]

# Read Pods (for replica set coordination)
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

---
# MongoDB RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: samplemind-mongodb-rolebinding
  namespace: samplemind-production
  labels:
    app: samplemind
    component: mongodb
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: samplemind-mongodb-role
subjects:
- kind: ServiceAccount
  name: samplemind-mongodb
  namespace: samplemind-production

---
# Redis Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: samplemind-redis
  namespace: samplemind-production
  labels:
    app: samplemind
    component: redis
automountServiceAccountToken: true

---
# Redis Role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: samplemind-redis-role
  namespace: samplemind-production
  labels:
    app: samplemind
    component: redis
rules:
# Read ConfigMaps
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]

# Read Secrets
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]

# Manage PVCs
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "watch"]

---
# Redis RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: samplemind-redis-rolebinding
  namespace: samplemind-production
  labels:
    app: samplemind
    component: redis
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: samplemind-redis-role
subjects:
- kind: ServiceAccount
  name: samplemind-redis
  namespace: samplemind-production

---
# =============================================================================
# Pod Security Policy (if using PSP - deprecated in K8s 1.25+)
# Consider using Pod Security Standards (PSS) instead
# =============================================================================

# Restricted Pod Security Policy
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: samplemind-restricted
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'runtime/default'
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'
  labels:
    app: samplemind
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  readOnlyRootFilesystem: true

---
# =============================================================================
# NOTES ON RBAC CONFIGURATION
# =============================================================================
#
# SERVICE ACCOUNTS:
# - Each component has its own service account for least-privilege access
# - Service accounts are namespaced resources
# - automountServiceAccountToken: true allows pods to use the SA token
#
# ROLES vs CLUSTERROLES:
# - Role: Permissions within a single namespace
# - ClusterRole: Permissions cluster-wide or for cluster-scoped resources
# - Use Roles for namespace-scoped access (preferred)
# - Use ClusterRoles only when absolutely necessary
#
# ROLEBINDINGS vs CLUSTERROLEBINDINGS:
# - RoleBinding: Grants permissions in a specific namespace
# - ClusterRoleBinding: Grants permissions cluster-wide
#
# TESTING RBAC:
#
# 1. Check service account permissions:
#    kubectl auth can-i get pods --as=system:serviceaccount:samplemind-production:samplemind-backend -n samplemind-production
#
# 2. List roles and bindings:
#    kubectl get roles,rolebindings -n samplemind-production
#
# 3. Describe specific role:
#    kubectl describe role samplemind-backend-role -n samplemind-production
#
# TROUBLESHOOTING:
#
# If pods can't access resources:
# 1. Verify service account exists
# 2. Check role has required permissions
# 3. Verify rolebinding links SA to role
# 4. Check pod spec uses correct service account
# 5. Review pod logs for authorization errors
#
# SECURITY BEST PRACTICES:
#
# 1. Principle of Least Privilege:
#    - Grant only necessary permissions
#    - Use namespace-scoped roles when possible
#    - Avoid cluster-admin permissions
#
# 2. Service Account Management:
#    - Use separate SAs for different components
#    - Disable automountServiceAccountToken if not needed
#    - Rotate SA tokens regularly
#
# 3. Auditing:
#    - Enable audit logging for RBAC events
#    - Monitor for permission denials
#    - Regularly review and update permissions
#
# 4. Pod Security:
#    - Use Pod Security Standards (PSS) in K8s 1.25+
#    - Replace PodSecurityPolicy with PSS
#    - Enforce security contexts in deployments
#
# MIGRATION TO POD SECURITY STANDARDS (K8s 1.25+):
#
# Instead of PodSecurityPolicy, label namespaces:
#
# kubectl label namespace samplemind-production \
#   pod-security.kubernetes.io/enforce=restricted \
#   pod-security.kubernetes.io/audit=restricted \
#   pod-security.kubernetes.io/warn=restricted
#
# PSS Levels:
# - privileged: Unrestricted (not recommended)
# - baseline: Minimally restrictive
# - restricted: Heavily restricted (recommended for production)
#
# COMMON PERMISSION PATTERNS:
#
# Read-only access:
# verbs: ["get", "list", "watch"]
#
# Full access:
# verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
#
# Metrics collection:
# verbs: ["get", "list"]
# resources: ["pods", "nodes", "services"]
#
# WORKLOAD IDENTITY (Cloud-specific):
#
# AWS:
# - Use IRSA (IAM Roles for Service Accounts)
# - Annotate SA with IAM role ARN
#
# GCP:
# - Use Workload Identity
# - Bind SA to GCP service account
#
# Azure:
# - Use AAD Pod Identity
# - Link SA to Azure managed identity
#
# =============================================================================