# Prometheus Configuration for SampleMind AI
# Global configuration
global:
  scrape_interval: 15s # Set the scrape interval to every 15 seconds
  evaluation_interval: 15s # Evaluate rules every 15 seconds
  external_labels:
    cluster: 'samplemind-production'
    environment: 'production'

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
            - 'alertmanager:9093'

# Load rules once and periodically evaluate them
rule_files:
  - 'alerts/critical.yml'
  - 'alerts/warning.yml'
  - 'rules/recording.yml'

# Scrape configurations
scrape_configs:
  # Prometheus self-monitoring
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  # SampleMind API Backend
  - job_name: 'samplemind-api'
    metrics_path: '/metrics'
    static_configs:
      - targets:
          - 'api:8000'
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        regex: '([^:]+):.*'
        replacement: '${1}'
      - source_labels: [__address__]
        target_label: __address__
        regex: '.*'
        replacement: 'api:8000'

  # Celery Workers
  - job_name: 'celery-workers'
    metrics_path: '/metrics'
    static_configs:
      - targets:
          - 'celery-worker-1:9090'
          - 'celery-worker-2:9090'
          - 'celery-worker-3:9090'
    relabel_configs:
      - source_labels: [__address__]
        target_label: worker
        regex: 'celery-worker-([0-9]+):.*'
        replacement: 'worker-${1}'

  # MongoDB Exporter
  - job_name: 'mongodb'
    static_configs:
      - targets:
          - 'mongodb-exporter:9216'
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: 'mongodb-exporter:9216'

  # Redis Exporter
  - job_name: 'redis'
    static_configs:
      - targets:
          - 'redis-exporter:9121'
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        regex: '([^:]+):.*'
        replacement: '${1}'

  # Node Exporter (System metrics)
  - job_name: 'node'
    static_configs:
      - targets:
          - 'node-exporter:9100'
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        regex: '([^:]+):.*'
        replacement: '${1}'

  # cAdvisor (Container metrics)
  - job_name: 'cadvisor'
    static_configs:
      - targets:
          - 'cadvisor:8080'
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        regex: '([^:]+):.*'
        replacement: '${1}'

  # NVIDIA GPU Exporter (if GPU available)
  - job_name: 'nvidia-gpu'
    static_configs:
      - targets:
          - 'nvidia-gpu-exporter:9445'
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        regex: '([^:]+):.*'
        replacement: '${1}'

  # ML Worker specific metrics
  - job_name: 'ml-worker'
    metrics_path: '/metrics'
    static_configs:
      - targets:
          - 'ml-worker-1:9091'
          - 'ml-worker-2:9091'
    relabel_configs:
      - source_labels: [__address__]
        target_label: worker
        regex: 'ml-worker-([0-9]+):.*'
        replacement: 'ml-worker-${1}'

  # Grafana
  - job_name: 'grafana'
    static_configs:
      - targets:
          - 'grafana:3000'

  # Kubernetes service discovery (if using k8s)
  - job_name: 'kubernetes-pods'
    kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
            - samplemind
    relabel_configs:
      # Only scrape pods with prometheus.io/scrape annotation
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      # Use custom path if prometheus.io/path annotation exists
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      # Use custom port if prometheus.io/port annotation exists
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      # Add pod labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name

# Remote write configuration (for long-term storage)
remote_write:
  - url: 'http://thanos-receive:19291/api/v1/receive'
    queue_config:
      capacity: 10000
      max_shards: 10
      min_shards: 1
      max_samples_per_send: 5000
      batch_send_deadline: 5s
      min_backoff: 30ms
      max_backoff: 100ms

# Remote read configuration
remote_read:
  - url: 'http://thanos-query:9090/api/v1/read'
    read_recent: true

# Storage configuration
storage:
  tsdb:
    path: /prometheus
    retention:
      time: 15d
      size: 50GB
    wal_compression: true